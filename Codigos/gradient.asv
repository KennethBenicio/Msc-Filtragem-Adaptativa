%% Deterministic Gradient Algorithm
clc;
close all;
clear all;

mi = 1e-3;
order = 2;
Samples = 1000;
error = zeros(Samples,1);
weights = zeros(order,Samples);
weights = complex(weights,0);

% Effectively is as there is no noise in the system.
SNR_dB = inf;
SNR_li = 10^(SNR_dB/10);
var_noise = 1/SNR_li;

signal_d = randn(Samples,1);
noise = sqrt(var_noise/2).*randn(Samples,1);
signal_x = signal_d + noise;

% Channel
Hz = [1 1.6];
signal_x = filter(Hz,1,signal_x);
Hz = [1 1];
signal_d = filter(Hz,1,signal_d);

p = [1; 0;];
Rx = [3.56, 1.60; 1.60, 3.56;];
wopt = inv(Rx)*p;
for ss = 1:(Samples - order - 1)
    error(ss,1) = signal_d(ss) - weights(:,ss)'*signal_x(ss:ss+order-1);
    weights(:,ss+1) = weights(:,ss) - 2*mi*(Rx*weights(:,ss) - p);
end

% MSE Curve
figure
semilogy(1:Samples, error.^2,'-','color', [0.3010 0.7450 0.9330], "linewidth", 1, "markersize", 8);
title('Deterministic Gradient Algorithm Behavior');
xlabel('Iterations');
ylabel('MSE');
grid on;
saveas(gcf,'gradient_mse.png')

figure
[W0, W1] = meshgrid (-1:0.01:1,-1:0.01:1);
wo = reshape()
for i = 1:order
   W = [W0(i) W1(i)]'; 
   Z(i) = -2-**p + *Rx*;
end
Z = W0.^2 + W1.^2;
contour(W0,W1,Z);
colormap('gray')
hold on;
for ss = 1:(Samples - order)
   plot(weights(1,ss),weights(2,ss),".-b","markersize", 8); 
end
hold off;
title('Deterministic Gradient Contour');
xlabel('W_1');
ylabel('W_0');
grid on;
saveas(gcf,'gradient_contour.png')